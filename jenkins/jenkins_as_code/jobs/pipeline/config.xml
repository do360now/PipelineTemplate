<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.22">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
        <string>org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>AWS_ACCESS_KEY_ID</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AWS_SECRET_ACCESS_KEY</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>#!groovy

// Build Parameters
properties([ parameters([
  string( name: &apos;AWS_ACCESS_KEY_ID&apos;, defaultValue: &apos;&apos;),
  string( name: &apos;AWS_SECRET_ACCESS_KEY&apos;, defaultValue: &apos;&apos;)
]), pipelineTriggers([]) ])

// Environment Variables
env.AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
env.AWS_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY

node {
  
  stage(&apos;GitSCM&apos;){
      git branch: &apos;deploy&apos;, url: &apos;file:///var/lib/jenkins/repo&apos;

  }

  stage(&quot;build &amp; SonarQube analysis&quot;) {
        def scannerHome = tool &quot;sonarqube&quot;
            withSonarQubeEnv(&quot;sonarqube&quot;) {
                sh &quot;&quot;&quot;
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=&apos;appworkspace&apos; \
                        -Dsonar.projectName=&apos;appworkspace&apos; \
                        -Dsonar.projectVersion=&apos;1.0.0&apos; \
                        -Dsonar.sonar.login=&apos;admin&apos; \
                        -Dsonar.sonar.password=&apos;admin&apos; \
                        -Dsonar.sources=&apos;src&apos;
                &quot;&quot;&quot;
      }
  }
      
  stage (&apos;Clean&apos;) {
        dir(&apos;../pipeline_def&apos;) {
           sh &apos;&apos;&apos;#!/bin/bash
            if [ -f inventory.txt ]
            then
              rm -rf inventory.txt
            fi
         &apos;&apos;&apos;
        }
  }
 
  stage (&apos;Terraform Plan&apos;) {
    dir(&apos;../pipeline_def&apos;) {
      sh &apos;terraform init&apos;
      sh &apos;terraform plan -no-color -out=create.tfplan&apos;
    }
    
  }

  stage (&apos;Terraform Apply&apos;) {
    dir(&apos;../pipeline_def&apos;) {
      sh &apos;terraform apply -no-color -auto-approve create.tfplan&apos;
    }
  }

  stage (&apos;WAIT TO DEPLOY AWS&apos;) {
    sleep 120
    dir(&apos;../pipeline_def&apos;) {
        sh &apos;terraform show&apos;
    }
  }

  stage (&apos;Ansible&apos;) {
      dir(&apos;../pipeline_def&apos;) {
        sh &apos;&apos;&apos;#!/bin/bash  
            chmod 400 jenkins.pem
            touch inventory.txt
            cat hosts.txt | while read line 
            do
              echo &quot;aws ansible_ssh_user=ubuntu ansible_ssh_private_key_file=jenkins.pem ansible_host=$line&quot; &gt; inventory.txt   
            done
            ansible-playbook playbook.yml -i inventory.txt
         &apos;&apos;&apos;
      }
  }
 
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>